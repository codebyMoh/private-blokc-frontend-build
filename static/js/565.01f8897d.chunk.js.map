{"version":3,"file":"static/js/565.01f8897d.chunk.js","mappings":"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","sources":["../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/es5-ext/global.js","../node_modules/sturdy-websocket/src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/websocket/lib/version.js"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n\n    this.modifyFormatter();\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  /**\n   * Overrides the base `Formatter` class inherited from ethers to support\n   * returning custom fields in Ethers response types.\n   *\n   * For context, ethers has a `Formatter` class that is used to format the\n   * response from a JSON-RPC request. Any fields that are not defined in the\n   * `Formatter` class are removed from the returned response. By modifying the\n   * `Formatter` class in this method, we can add support for fields that are\n   * not defined in ethers.\n   */\n  private modifyFormatter(): void {\n    this.formatter.formats['receiptLog']['removed'] = val => {\n      if (typeof val === 'boolean') {\n        return val;\n      }\n      return undefined;\n    };\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["RequestBatcher","constructor","sendBatchFn","maxBatchSize","arguments","length","undefined","pendingBatch","enqueueRequest","request","inflightRequest","resolve","reject","promise","Promise","this","push","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","super","EthersNetwork","batchRequests","batcherConnection","Object","assign","headers","batcher","requests","fetchJson","JSON","stringify","modifyFormatter","DEFAULT_ALCHEMY_API_KEY","getNetwork","CustomNetworks","DEFAULT_NETWORK","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","detectNetwork","_super","call","_startPending","logWarn","isCommunityResource","send","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response","formatter","formats","val","WS","WebSocket","logger","Logger","version","throwError","errors","UNSUPPORTED_OPERATION","operation","NextId","WebSocketProvider","_pollingInterval","_wsReady","defineReadOnly","websocket","onopen","keys","_requests","onmessage","messageEvent","parse","String","callback","sub","_subs","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","value","poll","polling","rid","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","subId","_startEvent","event","BigNumber","from","number","toNumber","_emitted","block","_getFilter","filter","removed","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","_stopEvent","listenerCount","destroy","readyState","CONNECTING","onerror","close","WebsocketBackfiller","maxBackfillBlocks","getNewHeadsBackfill","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","toBlockNumber","getBlockNumber","getHeadEventsInRange","Math","max","lastSeenBlockNumber","fromHex","minBlockNumber","reorgHeads","getReorgHeads","intermediateHeads","getLogsBackfill","previousLogs","getLogsInRange","commonAncestor","getCommonAncestor","removedLogs","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","setMaxBackfillBlock","newMax","blockNumberHex","toBlockExclusive","batchParts","i","toHex","sendBatch","toNewHeadsEvent","oldEvent","blockHead","getBlockByNumber","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupe","items","getKey","keysSeen","Set","item","key","has","add","CANCELLED","RETAINED_EVENT_BLOCK_COUNT","AlchemyWebSocketProvider","wsConstructor","protocol","SturdyWebSocket","_a","process","versions","node","require","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","Array","isArray","isResponse","isSubscriptionEvent","physicalId","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","handleReopen","clear","cancel","cancelled","makeCancelToken","cancelBackfill","__awaiter","resubscribeAndBackfill","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","on","eventName","listener","_addEventListener","once","off","isAlchemyEvent","_off","removeAllListeners","_removeAllListeners","_listenerCount","listeners","_listeners","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","ALCHEMY_EVENT_TYPES","customStartEvent","startingBlockNumber","resolvedParams","set","sentEvents","_len","args","_key","stopped","eventTag","apply","parts","nextId","_ref","sendBatchConcurrently","removeSocketListeners","addEventListener","removeEventListener","backfillEvents","withBackoffRetries","withTimeout","events","dedupeNewHeads","emitNewHeadsEvent","dedupeLogs","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","reconnect","req","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","AlchemySubscription","PENDING_TRANSACTIONS","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","MINED_TRANSACTIONS","found","MIN_RETRY_DELAY","RETRY_BACKOFF_FACTOR","MAX_RETRY_DELAY","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","naiveFallback","self","window","module","exports","globalThis","defineProperty","prototype","configurable","__global__","protocolsOrOptions","options","onclose","ondown","onreopen","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","ws","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","reason","disposeSocket","shutdown","handleClose","dispatchEvent","dispatchEventOfType","l","_this","connectTimeout","handleError","handleOpen","connectTimeoutId","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","slice","callListener","defaultPrevented","handleEvent","debug","s","DEFAULT_OPTIONS","POSITIVE_INFINITY","_globalThis","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop"],"sourceRoot":""}